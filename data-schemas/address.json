// base
{
	"properties":{
		"zip":{ "type":"string", "required":true },
		"city":{ "type":"string", "required":true },
		"country":{ "type":"string", "required":true } // ici on pourrait utiiser un transporter.retrieve pour choper la liste des pays accepté : à metre en enum
	}
}

// extended with views related properties
{
	"inherits":["base"],
	"views":{   //views is cascadedon other _views		"macros":"mymacros.html",    cacade:#.//_views
		"editInPlace":{  // default = false
			"replace":"selector to replace with editable ",   
			"clickOn":"selector ofthe object to be clicked to edit in place"
		}
	},
	"properties":{
		"zip":{ 
			"_views":{
				"view":{
					"macroName":"zip"
				},
				"edit":{
					"macroName":"editedZip"
				}
			}
		},
		//....
	}
}




render:function(){
	if(this.layer.rendered)
	{
		if(typeof this.layer.rendered === 'string')
		{
			var info = DeepRequest.isRetrievable(this.layer.rendered);
			switch(info.type)  {
				case "swig.template" : 
					if(info)
					break;
				case "swig.macro" : 

					break;
				case "function" : 
					this.rendered = this.layer.rendered(info.body);
				default: 
					this.rendered = this.layer.rendered;
			}
		}
		else
			for(var i in this.rendered)
			{
				if(!this.rendered.hasOwnProperty(i))
					continue;
				Renderer.render(this.rendered[i]);
			}
	}
}


// render type object

{
	"controller":"instance::deep-ui/json-editor",
	"domSelectors":{
		"parent":"#my-parent-selector",
		"self":"#my-selector",
		"meteo":"#my-meteo-selector",
		"items":"#my-items-selector",
		"jsonTree":"#my-json-tree"
	},
	"templates":{

	},
	"context":{
		"datas":"#/context/datas"			// shared datas from root node (generally app controller)
	},
	"rendered":{
		"self":{
			"what":"#../../../context",
			"how":"swig.render::#../../../templates/self",
			"where":"jquery.htmlOf::#../../../domSelectors/parent",
			"result":null,
			"domRef":null
		},
		"meteo":{
			"what":"#../../context/meteo-object",
			"how":"instance::MyLib/my-meteo-module.@.render",
			"where":"jquery.appendTo::#../../domSelectors/meteo"
		},
		"items2":{
			"what":[ "..." ],
			"how":function renderItems(items){ 
				var res = ""; 
				items.forEach(function(it){
					res += it.render();
				});
				return res;
			},
			"where":"jquery.appendTo::#../../domSelectors/items"
		}
	},
	"subs":{
		"schemaEditor":{
			"controller":"instance::dee-ui/json-editor",
			"context":{
				"datas":"my_schema.json",
				"schema":"my_meta_schema.json"
			},
			"domSelectors":{
				"jsonTree":"#my-parent-selector .my-json-schema-tree"
			}
		}
	},
	"items":[
		{ 
			"rendered":{
				"what":"#./context",
				"how":"swig.macro::#../../templates/macros/items@{{ __this.macroName}}",
				"where":"jquery.appendTo::#../../domSelectors/items"
			},
			"macroName":"textField",
			"context":{

			}
		},
		{ 
			"macroName":"textArea",
			"context":{

			}
		}
	],
	setBehaviour:function(){
		// still the same
	}
}



{
	contacts:[

	]
}



services
dummies
schema.put, post, get


json-editor :
	- instance
	- schema


/service/id
/service/?query
/services/?search=



// extended with form related properties
{
	"inherits":["video.youtube"],
	"viewStates":{
		"ignoreChilds":true,				// cascaded value to view and edit 
		"editKey":"cacading",
		"editInPlace":{  // if not present : default = false
			"replace":"selector to replace with editable ",   
			"clickOn":"selector ofthe object to be clicked to edit in place"
		},
		"view":{
			"rendered":"swig.template::#./templates/root§./"
		},
		"edit":{
			"rendered":"swig.template::#./templates/root§./"

		}
	}
}

//viewStates/brol=2

json editor options : 
{
	"mode":"edit",
	editKeys:false|true,
	editValue:true|false,
	additionalNodes:{

	},
	editInPlace:true|false


}