Modularisation :  

1) requirejs compatible
	- optimisation
	- late asynch load
	- no globals

2) full layered approach configurable : 
	- templates + settings + datas 
	- options object as argument
	- split functions

3) full encapsulation in ViewController
	use your widgets in a view and hide behaviour behind/through VC API (load, refresh, etc) 


var listAspect = {
	"items-src":"profile::...",
	locals:{
		list:"local-src::/..../list.json"	
	},
	settings:{
		pagination:30,
		allowDelete:true
	},
	templates:{
		"list-container":"swig::.../base-list-container.html",
		"list-item":"swig::.../items.html"
	},
	renderables:{
		list:{
			how:"#./templates/list-container",
			where:"dom.appendTo::body",
			done:function($nodes, rendered, what){

			}
		},
		items:{
			how:"#./templates/list-item",
		}

	},
	load:function(){
		return deep(this).branches(function(brancher){
			var self = this;
			brancher.branch().query("./[locals,templates]").deepLoad();
			brancher.branch()
			.query("./items-src")
			.load()
			.done(function(loaded){
				self.items = loaded;
			});
			return brancher;
		});
	},
	refresh:function(){
		return deep.ui.applyRenderables(this);
	}
}

: example : 

Usage 1:

var myView = {
	backgrounds:[
		deep.ui.ViewController,
		smart.widgets.list({
			templates:{
				container:"swig::...",
				item:"swig::..."
			},
			datas:"profile::...",

			allowDelete:true,
			pagination:50
		})
	]
}

Usage 2 : 

	smart.widgets.list({
			templates:{
				container:"swig::...",
				item:"swig::..."
			},
			datas:"profile::...",
			allowDelete:true,
			pagination:50
		})

Localisation : 

	manage it by store : 


		locals:["/my/path/to/locals1.json","/my/path/to/locals2"]
		
		local::/

		{{ locals|loc('/thanks/emailDomain/gmail') }}


TODO :






routes :

		routes:{
			campaign:{
				_controller_:"app::/views/campaign",
				_id_:{
					_output_:function(){
						return this.campaignId;
					},
					_handler_:function(rest, current)
					{
						this.campaignId = current;
						if(rest.length === 0)
							rest.push("information");
						return ["self","renderable2"];
					},
					information:{
						_controller_:"app::/views/campaign/tabs/information"
					},
					comments:{
						_controller_:"app::/views/campaign/tabs/comments"
					}
				},
				published:{
					_handler_:function(rest, current){
						this._externals.campaign = "campaign::?status=published";
					}
				}
			}
		}

		deep
		.route("/campaign/12/information")
		.done(function(success){
			// route updated in browser window : if server side : use window content to get html
		})

		algo for route management : 

		var queue = [];
		var currentQueueItem = null;
		var ctrl = null;

		readPaths(currentEntry, rest, current)

			var currentPart = parse(current); // convert _id_, _int_, etc

			currentEntry = currentEntry[currentPart];

			if(!currentEntry)
			{
				return defaultHandler();
			}

			if (!currentQueueItem || (currentEntry._controller_ && currentEntry._controller_ !==  currentQueueItem.controller))
			{
				ctrl = currentEntry._controller_;
				currentQueueItem = {
					controller: ctrl,
					args:[]
				}
				queue.push(currentQueueItem);
			}


				
			if(currentEntry._handler_)
				currentQueueItem.args.concat(_handler_.apply(ctrl,[rest, current]) || []);		

			var next = rest.shift();
			readPaths(currentEntry, rest, next);
		
		
		play queue : 

			var toload = [];
			queue.forEach(function(q){
				toLoad.push(deep(q.controller).load());	
			});

			deep(toload)
			.done(function(){
				queue.forEach(function(q){
					deep(q.controller).refresh(q.args);
				})
			})
			


deep.ui
.render("swig::...", "user::*")
.done(function(rendered){
	var view = deep.ui.appendTo("...")(rendered);
	$(view)
	.find("button")
	.click(function(e){
		deep.ui.fromDataPath(view, "user::schema");
		.store("user")
		.post()
		.done(function(result){

		})
		.fail(function(error){

		});
	});
});





